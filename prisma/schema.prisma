generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String
  emailVerified DateTime?
  image         String?
  onboarded     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectId     String?
  chattoken     ChatToken[]
  meetings      Meeting[]
  project       Project?    @relation(fields: [projectId], references: [id])
  accounts      accounts[]
  sessions      sessions[]
}

model ChatToken {
  id           String @id @default(cuid())
  sessionToken String @unique @default(uuid())
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                   String    @id @default(cuid())
  name                 String
  description          String?
  userId               String
  githubRepo           String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  githubInstallationId Int?
  additionalData       Json?
  apiKeys              ApiKey[]
  meetings             Meeting[]
  User                 User[]
}

model ApiKey {
  id             String   @id @default(cuid())
  key            String
  service        String
  additionalData Json?
  projectId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  project        Project? @relation(fields: [projectId], references: [id])
}

model Meeting {
  id            String    @id @default(cuid())
  userId        String
  projectId     String
  meeting_id    String
  attendees     String[]  @default([])
  creation_date DateTime  @default(now())
  end_date      DateTime?
  name          String?
  bot_data      Json      @default("{}")
  bot_id        String?
  tasks         Json      @default("{}")
  summary       String?   @default("")
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  User                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model checkpoint_blobs {
  thread_id     String
  checkpoint_ns String @default("")
  channel       String
  version       String
  type          String
  blob          Bytes?

  @@id([thread_id, checkpoint_ns, channel, version])
  @@index([thread_id])
}

model checkpoint_migrations {
  v Int @id
}

model checkpoint_writes {
  thread_id     String
  checkpoint_ns String  @default("")
  checkpoint_id String
  task_id       String
  idx           Int
  channel       String
  type          String?
  blob          Bytes
  task_path     String  @default("")

  @@id([thread_id, checkpoint_ns, checkpoint_id, task_id, idx])
  @@index([thread_id])
}

model checkpoints {
  thread_id            String
  checkpoint_ns        String  @default("")
  checkpoint_id        String
  parent_checkpoint_id String?
  type                 String?
  checkpoint           Json
  metadata             Json    @default("{}")

  @@id([thread_id, checkpoint_ns, checkpoint_id])
  @@index([thread_id])
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model store {
  prefix      String
  key         String
  value       Json
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  expires_at  DateTime? @db.Timestamptz(6)
  ttl_minutes Int?

  @@id([prefix, key])
  @@index([prefix])
}

model store_migrations {
  v Int @id
}

model verification_tokens {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
